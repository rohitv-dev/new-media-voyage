/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MediaRouteRouteImport } from './routes/media/route'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MediaIndexRouteImport } from './routes/media/index'
import { Route as MediaAddRouteImport } from './routes/media/add'
import { Route as ProtectedProfileRouteImport } from './routes/_protected/profile'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as MediaViewIdRouteImport } from './routes/media/view.$id'
import { Route as MediaUpdateIdRouteImport } from './routes/media/update.$id'
import { Route as MediaFriendNameMediaRouteImport } from './routes/media/$friendName.media'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const MediaRouteRoute = MediaRouteRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MediaIndexRoute = MediaIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MediaRouteRoute,
} as any)
const MediaAddRoute = MediaAddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => MediaRouteRoute,
} as any)
const ProtectedProfileRoute = ProtectedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const MediaViewIdRoute = MediaViewIdRouteImport.update({
  id: '/view/$id',
  path: '/view/$id',
  getParentRoute: () => MediaRouteRoute,
} as any)
const MediaUpdateIdRoute = MediaUpdateIdRouteImport.update({
  id: '/update/$id',
  path: '/update/$id',
  getParentRoute: () => MediaRouteRoute,
} as any)
const MediaFriendNameMediaRoute = MediaFriendNameMediaRouteImport.update({
  id: '/$friendName/media',
  path: '/$friendName/media',
  getParentRoute: () => MediaRouteRoute,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authRouteRouteWithChildren
  '/media': typeof MediaRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/profile': typeof ProtectedProfileRoute
  '/media/add': typeof MediaAddRoute
  '/media/': typeof MediaIndexRoute
  '/media/$friendName/media': typeof MediaFriendNameMediaRoute
  '/media/update/$id': typeof MediaUpdateIdRoute
  '/media/view/$id': typeof MediaViewIdRoute
}
export interface FileRoutesByTo {
  '/': typeof authRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/profile': typeof ProtectedProfileRoute
  '/media/add': typeof MediaAddRoute
  '/media': typeof MediaIndexRoute
  '/media/$friendName/media': typeof MediaFriendNameMediaRoute
  '/media/update/$id': typeof MediaUpdateIdRoute
  '/media/view/$id': typeof MediaViewIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/media': typeof MediaRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/_protected/profile': typeof ProtectedProfileRoute
  '/media/add': typeof MediaAddRoute
  '/media/': typeof MediaIndexRoute
  '/media/$friendName/media': typeof MediaFriendNameMediaRoute
  '/media/update/$id': typeof MediaUpdateIdRoute
  '/media/view/$id': typeof MediaViewIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/media'
    | '/login'
    | '/signup'
    | '/profile'
    | '/media/add'
    | '/media/'
    | '/media/$friendName/media'
    | '/media/update/$id'
    | '/media/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/profile'
    | '/media/add'
    | '/media'
    | '/media/$friendName/media'
    | '/media/update/$id'
    | '/media/view/$id'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/_protected'
    | '/media'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/_protected/profile'
    | '/media/add'
    | '/media/'
    | '/media/$friendName/media'
    | '/media/update/$id'
    | '/media/view/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
  MediaRouteRoute: typeof MediaRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/media': {
      id: '/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/media/': {
      id: '/media/'
      path: '/'
      fullPath: '/media/'
      preLoaderRoute: typeof MediaIndexRouteImport
      parentRoute: typeof MediaRouteRoute
    }
    '/media/add': {
      id: '/media/add'
      path: '/add'
      fullPath: '/media/add'
      preLoaderRoute: typeof MediaAddRouteImport
      parentRoute: typeof MediaRouteRoute
    }
    '/_protected/profile': {
      id: '/_protected/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProtectedProfileRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/media/view/$id': {
      id: '/media/view/$id'
      path: '/view/$id'
      fullPath: '/media/view/$id'
      preLoaderRoute: typeof MediaViewIdRouteImport
      parentRoute: typeof MediaRouteRoute
    }
    '/media/update/$id': {
      id: '/media/update/$id'
      path: '/update/$id'
      fullPath: '/media/update/$id'
      preLoaderRoute: typeof MediaUpdateIdRouteImport
      parentRoute: typeof MediaRouteRoute
    }
    '/media/$friendName/media': {
      id: '/media/$friendName/media'
      path: '/$friendName/media'
      fullPath: '/media/$friendName/media'
      preLoaderRoute: typeof MediaFriendNameMediaRouteImport
      parentRoute: typeof MediaRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedProfileRoute: typeof ProtectedProfileRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedProfileRoute: ProtectedProfileRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

interface MediaRouteRouteChildren {
  MediaAddRoute: typeof MediaAddRoute
  MediaIndexRoute: typeof MediaIndexRoute
  MediaFriendNameMediaRoute: typeof MediaFriendNameMediaRoute
  MediaUpdateIdRoute: typeof MediaUpdateIdRoute
  MediaViewIdRoute: typeof MediaViewIdRoute
}

const MediaRouteRouteChildren: MediaRouteRouteChildren = {
  MediaAddRoute: MediaAddRoute,
  MediaIndexRoute: MediaIndexRoute,
  MediaFriendNameMediaRoute: MediaFriendNameMediaRoute,
  MediaUpdateIdRoute: MediaUpdateIdRoute,
  MediaViewIdRoute: MediaViewIdRoute,
}

const MediaRouteRouteWithChildren = MediaRouteRoute._addFileChildren(
  MediaRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
  MediaRouteRoute: MediaRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
